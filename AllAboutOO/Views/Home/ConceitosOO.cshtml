


<br/>
<div class="row">
    <div class="col-md-12">
        <p class="TextTitle">Conceitos Orientação a Objetos</p>
        <p class="TextSubtile">O que é orientação a Objetos</p>        
    </div>

    <div class="col-md-12">
        <p class ="blockquote">A orientação a objetos é um modelo de análise, projeto e programação de sistemas de software baseado na composição e interação entre diversas unidades de software chamadas de objetos. - Wikipedia</p>
        <p class="Text">           
            Orientação a objetos (OO), em uma definição formal, é um paradigma de análise, projeto e programação de sistemas de software baseado na composição e interação entre diversas unidades de software chamadas de objetos. Ou seja, é um modelo utilizado no desenvolvimento de software onde trabalhamos com unidades chamadas objetos (que serão explicados mais adiante). Este modelo visa, principalmente, organização, desempenho, sustentabilidade e reutilização do software.
            Como veremos, a orientação a objetos visa um pensamento o mais próximo possível da vida real. Ao programar orientado a objetos não teremos apenas funções que são chamadas uma seguida da outra, mas sim objetos que possuem estado e comportamento.
            Tudo isso será melhor detalhado no decorrer dos capítulos do livro.
        </p>

        <p class="TextSubtile">Porque programar orientado a objetos</p>
           <p class="Text">
               A Programação Orientada a Objetos (POO), foi criada para tentar aproximar o mundo real e o mundo virtual: a ideia fundamental é tentar simular o mundo real dentro do computador. Para isso, nada mais natural do que utilizar objetos, afinal, nosso mundo é composto de objetos, certo?
               Na Programação Orientada a Objetos, o programador (você) é responsável por moldar o mundo dos objetos, e definir como os objetos devem interagir entre si. Os objetos "conversam" uns com os outros através do envio de mensagens, e o papel principal do programador é definir quais serão as mensagens que cada objeto pode receber, e também qual a ação que o objeto deve realizar ao receber cada mensagem.
               Isso possibilita a criação de códigos com baixo acoplamento (explicado mais adiante) e que podem ser facilmente reutilizados, o que são alguns dos principais motivos para se programar orientado a objetos.
           </p>
    </div>

    @Html.ActionLink("<< Voltar", "Index", "Home")
    
</div>
